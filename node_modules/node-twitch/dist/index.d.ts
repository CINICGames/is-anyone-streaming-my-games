/// <reference types="node" />
import { EventEmitter } from "events";
import { Scope } from "./types/scopes";
import { User } from "./types/objects";
import { TwitchApiConfig, BaseOptions, GetAllStreamTagsOptions, GetBitsLeaderboardOptions, GetFollowsOptions, GetStreamsOptions, GetVideosOptions, GetSubsOptions, SearchChannelsOptions, SearchCategoriesOptions, GetStreamTagsOptions, GetBannedUsersOptions, GetExtensionTransactionsOptions, GetCheermotesOptions, GetStreamKeyOptions, GetChannelInfoOptions, CreateUserFollowsOptions, DeleteUserFollowsOptions, ClipsBroadcasterIdOptions, ClipsGameIdOptions, ClipsIdOptions, GetStreamMarkerUserIdOptions, GetStreamMarkerVideoIdOptions, GetUserActiveExtensionsOptions, ModifyChannelInformationOptions, UpdateUserOptions, CreateClipOptions, GetModeratorsOptions, GetCodeStatusOptions, ReplaceStreamTagsOptions, StartCommercialOptions } from "./types/options";
import { APIBitsLeaderboardResponse, APIFollowResponse, APIGameResponse, APIStreamResponse, APITagResponse, APIUserResponse, APIVideoResponse, APISubResponse, APIChannelResponse, APIBanResponse, APIExtensionTransactionResponse, APICheermoteResponse, APIChanneInfoResponse, APIClipsResponse, APIStreamMarkerResponse, APIExtensionResponse, APIActiveUserExtensionResponse, APICreateClipResponse, APIModeratorResponse, APICodeStatusResponse, APICommercialResponse } from "./types/responses";
/** Twitch API */
export default class TwitchApi extends EventEmitter {
    client_secret: string;
    client_id: string;
    user?: User;
    access_token?: string;
    refresh_token?: string;
    scopes?: Scope[];
    redirect_uri?: string;
    /** @internal */
    base: string;
    refresh_attempts: number;
    ready: boolean;
    constructor(config: TwitchApiConfig);
    /** Initialize the api.
     * @internal
    */
    private _init;
    /** Throw an error
     * @internal
    */
    private _error;
    /** Get an app access token
     * @internal
     */
    private _getAppAccessToken;
    /** Refresh the access token
     * @internal
    */
    private _refresh;
    /** Checks if an event is handled or not
     * @internal
    */
    private _isListeningFor;
    /** Check validity of refresh token
     * @internal
    */
    private _validate;
    /** Make a get request to the twitch api
     * @internal
    */
    private _get;
    /**
     * Send update request, ie. post, put, patch, delete.
     * @internal
     */
    _update(endpoint: string, data?: Record<string, unknown>, method?: "post" | "put" | "delete" | "patch"): Promise<any>;
    /** Send a post request to the Twitch API
     * @internal
     */
    private _post;
    /** Send a delete request to the Twitch API
     * @internal
     */
    private _delete;
    /** Send a patch request to the Twitch API
     * @internal
    */
    private _patch;
    /** Send put request to the Twitch API
     * @internal
    */
    private _put;
    /** Check if the current instance was created with a certain scope
     * @internal
     */
    private _hasScope;
    /***************
    Authentication.
    ***************/
    /** Generate url required to get permission from users */
    generateAuthUrl(): string;
    /** Get user access from a code generated by visiting the url created by `generateAuthUrl` */
    getUserAccess(code: string): Promise<void>;
    /************************************
    Methods NOT requiring user permissions
    *************************************/
    /** Get games by their name or id */
    getGames(games: string | number | string[] | number[]): Promise<APIGameResponse>;
    /** Gets games sorted by number of current viewers on Twitch, most popular first. */
    getTopGames(options?: BaseOptions): Promise<APIGameResponse>;
    /** Get one or more users by their login names or twitch ids. If only one user is needed, a single string will suffice. */
    getUsers(ids: string | number | string[] | number[]): Promise<APIUserResponse>;
    /** Get follows to or from a channel. Must provide either from_id or to_id. */
    getFollows(options?: GetFollowsOptions): Promise<APIFollowResponse>;
    /** Get one or more live streams */
    getStreams(options?: GetStreamsOptions): Promise<APIStreamResponse>;
    /** Gets the list of all stream tags defined by Twitch, optionally filtered by tag ID(s). */
    getAllStreamTags(options?: GetAllStreamTagsOptions): Promise<APITagResponse>;
    /** Gets the list of tags for a specified stream (channel). */
    getStreamTags(options: GetStreamTagsOptions): Promise<APITagResponse>;
    /** Fetch videos by a user id, game id, or one or more video ids. Only one of these can be specified at a time. */
    getVideos(options: GetVideosOptions): Promise<APIVideoResponse>;
    getClips(options: ClipsBroadcasterIdOptions | ClipsGameIdOptions | ClipsIdOptions): Promise<APIClipsResponse>;
    getChannelInformation(options: GetChannelInfoOptions): Promise<APIChanneInfoResponse>;
    /** Returns a list of channels (users who have streamed within the past 6 months) that match the query via channel name or description either entirely or partially. Results include both live and offline channels. Online channels will have additional metadata (e.g. started_at, tag_ids). See sample response for distinction. */
    searchChannels(options: SearchChannelsOptions): Promise<APIChannelResponse>;
    /** Returns a list of games or categories that match the query via name either entirely or partially. */
    searchCategories(options: SearchCategoriesOptions): Promise<APIGameResponse>;
    /** Get Extension Transactions allows extension back end servers to fetch a list of transactions that have occurred for their extension across all of Twitch. */
    getExtensionTransactions(options: GetExtensionTransactionsOptions): Promise<APIExtensionTransactionResponse>;
    /** Retrieves the list of available Cheermotes, animated emotes to which viewers can assign Bits, to cheer in chat. Cheermotes returned are available throughout Twitch, in all Bits-enabled channels. */
    getCheermotes(options?: GetCheermotesOptions): Promise<APICheermoteResponse>;
    /*********************************
    Methods requiring user permissions
    **********************************/
    /** Gets the channel stream key for a user. */
    getStreamKey(options: GetStreamKeyOptions): Promise<string>;
    /** Gets the currently authenticated users profile information. */
    getCurrentUser(): Promise<User | undefined>;
    /** Gets a ranked list of Bits leaderboard information for an authorized broadcaster. */
    getBitsLeaderboard(options?: GetBitsLeaderboardOptions): Promise<APIBitsLeaderboardResponse>;
    /** Get all of a broadcaster’s subscriptions. */
    getSubs(options: GetSubsOptions): Promise<APISubResponse>;
    /** Returns all banned and timed-out users in a channel. */
    getBannedUsers(options: GetBannedUsersOptions): Promise<APIBanResponse>;
    /** Adds a specified user to the followers of a specified channel. A successful request does not return any content. */
    createUserFollows(options: CreateUserFollowsOptions): Promise<Record<string, unknown> | void>;
    /** Deletes a specified user from the followers of a specified channel. */
    deleteUserFollows(options: DeleteUserFollowsOptions): Promise<Record<string, unknown> | void>;
    /** Gets a list of markers for either a specified user’s most recent stream or a specified VOD/video (stream), ordered by recency. A marker is an arbitrary point in a stream that the broadcaster wants to mark; e.g., to easily return to later. The only markers returned are those created by the user identified by the Bearer token.

    The response has a JSON payload with a `data` field containing an array of marker information elements and a `pagination` field containing information required to query for more follow information. */
    getStreamMarkers(options: GetStreamMarkerUserIdOptions | GetStreamMarkerVideoIdOptions): Promise<APIStreamMarkerResponse>;
    /** Gets a list of all extensions (both active and inactive) for a specified user, identified by a Bearer token.

    The response has a JSON payload with a `data` field containing an array of user-information elements. */
    getUserExtensions(): Promise<APIExtensionResponse>;
    /** Gets information about active extensions installed by a specified user, identified by a user ID or Bearer token. */
    getUserActiveExtensions(options?: GetUserActiveExtensionsOptions): Promise<APIActiveUserExtensionResponse>;
    /** Modifies channel information for users. */
    modifyChannelInformation(options: ModifyChannelInformationOptions): Promise<void>;
    /** Updates the description of a user specified by a Bearer token. */
    updateUser(options?: UpdateUserOptions): Promise<APIUserResponse>;
    /** Creates a clip programmatically. This returns both an ID and an edit URL for the new clip.

    Note that the clips service returns a maximum of 1000 clips,

    Clip creation takes time. We recommend that you query Get Clips, with the clip ID that is returned here. If Get Clips returns a valid clip, your clip creation was successful. If, after 15 seconds, you still have not gotten back a valid clip from Get Clips, assume that the clip was not created and retry Create Clip.

    This endpoint has a global rate limit, across all callers. The limit may change over time, but the response includes informative headers: */
    createClip(options: CreateClipOptions): Promise<APICreateClipResponse>;
    /** Returns all moderators in a channel. */
    getModerators(options: GetModeratorsOptions): Promise<APIModeratorResponse>;
    /** Gets the status of one or more provided Bits codes. This API requires that the caller is an authenticated Twitch user. The API is throttled to one request per second per authenticated user. Codes are redeemable alphanumeric strings tied only to the bits product. This third-party API allows other parties to redeem codes on behalf of users. Third-party app and extension developers can use the API to provide rewards of bits from within their games.

    All codes are single-use. Once a code has been redeemed, via either this API or the site page, then the code is no longer valid for any further use.

    This endpoint is only available for developers who have a preexisting arrangement with Twitch. We provide sets of codes to the third party as part of a contract agreement. The third-party program then calls this API to credit the Twitch user by submitting specific code(s). This means that a bits reward can be applied without users having to follow any manual steps. */
    getCodeStatus(options: GetCodeStatusOptions): Promise<APICodeStatusResponse>;
    /** Applies specified tags to a specified stream, overwriting any existing tags applied to that stream. If no tags are specified, all tags previously applied to the stream are removed. Automated tags are not affected by this operation.

    Tags expire 72 hours after they are applied, unless the stream is live within that time period. If the stream is live within the 72-hour window, the 72-hour clock restarts when the stream goes offline. The expiration period is subject to change. */
    replaceStreamTags(options: ReplaceStreamTagsOptions): Promise<void>;
    /** Starts a commercial on a specified channel. */
    startCommercial(options: StartCommercialOptions): Promise<APICommercialResponse>;
}
